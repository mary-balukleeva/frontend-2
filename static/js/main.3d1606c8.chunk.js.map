{"version":3,"sources":["components/DayInfo/styles.module.scss","components/Header/styles.module.scss","components/Weatherinfo/styles.module.scss","components/Cities/styles.module.scss","components/Search/styles.module.scss","components/WeekInfo/styles.module.scss","components/Marker/styles.module.scss","components/Cities/index.js","components/Search/index.js","redux/cities/actions.js","redux/cities/types.js","redux/weather/actions.js","redux/weather/types.js","components/Header/index.js","components/Weatherinfo/index.js","components/Layout/index.js","components/Main/index.js","redux/user/actions.js","redux/user/types.js","components/Marker/index.js","components/DayInfo/index.js","components/Today/index.js","components/Tomorrow/index.js","components/WeekInfo/index.js","components/Week/index.js","components/City/index.js","App.js","hooks/useScript.js","services/ApiService.js","services/WeatherService.js","services/index.js","services/UserService.js","redux/cities/index.js","redux/user/index.js","redux/weather/index.js","redux/index.js","index.js","configureStore.js"],"names":["module","exports","connect","state","data","cities","history","useHistory","className","styles","Cities","titleWrapper","map","city","index","key","onClick","push","handleClick","formattedSuggestion","mainText","description","dispatch","selectCity","params","getState","api","geocodeByAddress","then","results","getLatLng","lat","lng","type","payload","coords","loadForecast","weather","fetchForecast","catch","err","useState","address","setAddress","value","onChange","onSelect","placeId","suggestion","getInputProps","suggestions","getSuggestionItemProps","loading","Search","placeholder","searchInput","autocompleteDropdownContainer","style","active","backgroundColor","cursor","selectedCity","Header","dates","to","link","weatherState","addCity","location","weatherData","setWeather","isAdded","setIsAdded","isLoading","useEffect","WeatherInfo","info","main","temp","wind","speed","addContainer","setTimeout","Layout","children","user","detectUserCity","fetchUserLocation","response","loadWeather","fetchToday","countryCode","loadCurrentWeather","showTooltip","setShowTooltip","currentWeather","marker","tooltip","feels_like","day","forecast","setCoords","tableData","DayInfo","infoBlock","filter","item","dt_txt","match","moment","format","add","detectDay","table","row","cell","dt","mapBlock","bootstrapURLKeys","process","center","defaultZoom","WeekInfo","wrapper","Week","loadCityWeather","useParams","cityWeather","App","status","src","setStatus","script","document","querySelector","getAttribute","createElement","async","setAttribute","body","appendChild","setAttributeFromEvent","event","addEventListener","setStateFromEvent","removeEventListener","useScript","path","exact","url","method","options","headers","token","localStorage","getItem","fetch","result","contentType","get","json","text","Promise","all","JSON","parse","reject","this","call","stringify","generateUrl","ApiService","initState","combineReducers","list","store","createStore","rootReducer","applyMiddleware","thunk","withExtraArgument","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3d1606c8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"DayInfo\":\"styles_DayInfo__3nISN\",\"infoBlock\":\"styles_infoBlock__2g628\",\"day\":\"styles_day__3qgQr\",\"table\":\"styles_table__3RUkG\",\"row\":\"styles_row__y08Ud\",\"cell\":\"styles_cell__1yzEX\",\"mapBlock\":\"styles_mapBlock__1QnuX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"styles_Header__2KoFd\",\"dates\":\"styles_dates__2hW3s\",\"link\":\"styles_link__3mu6n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"WeatherInfo\":\"styles_WeatherInfo__oWZUq\",\"info\":\"styles_info__1QSM5\",\"addContainer\":\"styles_addContainer__mUP0u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cities\":\"styles_Cities___s9yl\",\"titleWrapper\":\"styles_titleWrapper__1jEcw\",\"city\":\"styles_city__3tDd7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Search\":\"styles_Search__3o_5Q\",\"searchInput\":\"styles_searchInput__2yLC4\",\"autocompleteDropdownContainer\":\"styles_autocompleteDropdownContainer__3E1DW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"styles_wrapper__3dadQ\",\"Week\":\"styles_Week__3v7ES\",\"day\":\"styles_day__1enfZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"marker\":\"styles_marker__6Cy6W\",\"tooltip\":\"styles_tooltip__opSHf\"};","import React from 'react'\nimport { connect } from 'react-redux'\nimport styles from './styles.module.scss'\nimport { useHistory } from 'react-router-dom'\n\nconst Cities = ({ data }) => {\n    const history = useHistory()\n\n    const handleClick = (city) => history.push(`/location/${city}`)\n\n    const { cities } = data\n\n    return (\n        <div className={styles.Cities}>\n            <div className={styles.titleWrapper}>\n                <h1>Saved cities</h1>\n            </div>\n            {cities &&\n                cities.map((city, index) => (\n                    <div\n                        className={styles.city}\n                        key={index}\n                        onClick={() =>\n                            handleClick(city.formattedSuggestion.mainText)\n                        }\n                    >\n                        {city.description}\n                    </div>\n                ))}\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    data: state.cities,\n})\n\nexport default connect(mapStateToProps)(Cities)\n","import React, { useState } from 'react'\nimport PlacesAutocomplete from 'react-places-autocomplete'\nimport { selectCity } from '../../redux/cities/actions'\nimport { connect } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport styles from './styles.module.scss'\nimport { loadForecast } from '../../redux/weather/actions'\n\nconst Search = ({ selectCity, loadForecast }) => {\n    const history = useHistory()\n\n    const [address, setAddress] = useState('')\n\n    const handleChange = (value) => {\n        setAddress(value)\n    }\n\n    const handleSelect = (address, placeId, suggestion) => {\n        selectCity(suggestion)\n        loadForecast(suggestion.formattedSuggestion.mainText)\n        history.push('/today')\n    }\n\n    return (\n        <PlacesAutocomplete\n            value={address}\n            onChange={handleChange}\n            onSelect={handleSelect}\n        >\n            {({\n                getInputProps,\n                suggestions,\n                getSuggestionItemProps,\n                loading,\n            }) => (\n                <div className={styles.Search}>\n                    <input\n                        {...getInputProps({\n                            placeholder: 'Search Places ...',\n                            className: styles.searchInput,\n                        })}\n                    />\n                    <div className={styles.autocompleteDropdownContainer}>\n                        {loading && <div>Loading...</div>}\n                        {suggestions.map((suggestion) => {\n                            const style = suggestion.active\n                                ? {\n                                      backgroundColor: '#e5e3e3',\n                                      cursor: 'pointer',\n                                  }\n                                : {\n                                      backgroundColor: '#ffffff',\n                                      cursor: 'pointer',\n                                  }\n                            return (\n                                <div\n                                    {...getSuggestionItemProps(suggestion, {\n                                        style,\n                                    })}\n                                    key={suggestion.placeId}\n                                >\n                                    <span>{suggestion.description}</span>\n                                </div>\n                            )\n                        })}\n                    </div>\n                </div>\n            )}\n        </PlacesAutocomplete>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    selectCity: (params) => dispatch(selectCity(params)),\n    loadForecast: (params) => dispatch(loadForecast(params)),\n})\n\nexport default connect(null, mapDispatchToProps)(Search)\n","import * as Types from './types'\nimport { geocodeByAddress, getLatLng } from 'react-places-autocomplete'\n\nexport const selectCity = (data) => (dispatch, getState, api) => {\n    geocodeByAddress(data.description)\n        .then((results) => getLatLng(results[0]))\n        .then(({ lat, lng }) => {\n            dispatch({\n                type: Types.SELECT_CITY,\n                payload: {\n                    ...data,\n                    coords: { lat, lng },\n                },\n            })\n        })\n}\n\nexport const addCity = () => ({\n    type: Types.ADD_CITY,\n})\n","export const SELECT_CITY = 'select-city'\nexport const ADD_CITY = 'add-city'\n","import * as Types from './types'\n\nexport const loadWeather = (city) => (dispatch, getState, api) => {\n    dispatch({\n        type: Types.LOAD_WEATHER,\n    })\n\n    return api.weather\n        .fetchToday(city)\n        .then((payload) => {\n            dispatch({\n                type: Types.SUCCESSFULLY_LOAD_WEATHER,\n                payload,\n            })\n        })\n        .catch((err) => {\n            dispatch({\n                type: Types.ERROR_IN_LOAD_WEATHER,\n                payload: err,\n            })\n        })\n}\n\nexport const loadForecast = (city) => (dispatch, getState, api) => {\n    dispatch({\n        type: Types.LOAD_FORECAST,\n    })\n\n    return api.weather\n        .fetchForecast(city)\n        .then((payload) => {\n            dispatch({\n                type: Types.SUCCESSFULLY_LOAD_FORECAST,\n                payload,\n            })\n        })\n        .catch((err) => {\n            dispatch({\n                type: Types.ERROR_IN_LOAD_FORECAST,\n                payload: err,\n            })\n        })\n}\n\nexport const loadCityWeather = (city) => (dispatch, getState, api) => {\n    dispatch({\n        type: Types.LOAD_CITY_WEATHER,\n    })\n\n    return api.weather\n        .fetchToday(city)\n        .then((payload) => {\n            dispatch({\n                type: Types.SUCCESSFULLY_LOAD_CITY_WEATHER,\n                payload,\n            })\n        })\n        .catch((err) => {\n            dispatch({\n                type: Types.ERROR_IN_LOAD_CITY_WEATHER,\n                payload: err,\n            })\n        })\n}\n\nexport const loadCurrentWeather = (city) => (dispatch, getState, api) => {\n    dispatch({\n        type: Types.LOAD_CURRENT_WEATHER,\n    })\n\n    return api.weather\n        .fetchToday(city)\n        .then((payload) => {\n            dispatch({\n                type: Types.SUCCESSFULLY_LOAD_CURRENT_WEATHER,\n                payload,\n            })\n        })\n        .catch((err) => {\n            dispatch({\n                type: Types.ERROR_IN_LOAD_CURRENT_WEATHER,\n                payload: err,\n            })\n        })\n}\n","export const LOAD_WEATHER = 'load-weather'\nexport const SUCCESSFULLY_LOAD_WEATHER = 'successfully-load-weather'\nexport const ERROR_IN_LOAD_WEATHER = 'error-in-load-weather'\n\nexport const LOAD_FORECAST = 'load-forecast'\nexport const SUCCESSFULLY_LOAD_FORECAST = 'successfully-load-forecast'\nexport const ERROR_IN_LOAD_FORECAST = 'error-in-load-forecast'\n\nexport const LOAD_CITY_WEATHER = 'load-city-weather'\nexport const SUCCESSFULLY_LOAD_CITY_WEATHER = 'successfully-load-city-weather'\nexport const ERROR_IN_LOAD_CITY_WEATHER = 'error-in-load-city-weather'\n\nexport const LOAD_CURRENT_WEATHER = 'load-current-weather'\nexport const SUCCESSFULLY_LOAD_CURRENT_WEATHER = 'successfully-load-current-weather'\nexport const ERROR_IN_LOAD_CURRENT_WEATHER = 'error-in-load-current-weather'\n","import React from 'react'\nimport styles from './styles.module.scss'\nimport { Link } from 'react-router-dom'\nimport Search from '../Search'\nimport { connect } from 'react-redux'\n\nconst Header = ({ cities }) => {\n    const { selectedCity } = cities\n\n    return (\n        <header className={styles.Header}>\n            <div className={styles.dates}>\n                <Link to='/' className={styles.link}>\n                    Home\n                </Link>\n                <Link to='/today' className={styles.link}>\n                    Today\n                </Link>\n                <Link to='/tomorrow' className={styles.link}>\n                    Tomorrow\n                </Link>\n                <Link to='/week' className={styles.link}>\n                    Week\n                </Link>\n            </div>\n\n            <div className='city'>\n                {selectedCity && selectedCity.description}\n            </div>\n\n            <div className='search-container'>\n                <Search />\n            </div>\n        </header>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    cities: state.cities,\n})\n\nexport default connect(mapStateToProps)(Header)\n","import React, { useEffect, useState } from 'react'\nimport styles from './styles.module.scss'\nimport { addCity } from '../../redux/cities/actions'\nimport { connect } from 'react-redux'\n\nconst WeatherInfo = ({ location, weatherData, weatherState, addCity }) => {\n    const [weather, setWeather] = useState(weatherData)\n    const [isAdded, setIsAdded] = useState(false)\n\n    const { isLoading } = weatherState\n\n    const handleClick = () => {\n        setIsAdded(true)\n        setTimeout(() => {\n            setIsAdded(false)\n        }, 2000)\n        addCity()\n    }\n\n    useEffect(() => {\n        setWeather(weatherData)\n    }, [weatherData])\n\n    return (\n        <div className={styles.WeatherInfo}>\n            {isLoading && <h1>Loading...</h1>}\n\n            {!isLoading && !weather && <h1>No data found</h1>}\n\n            {!isLoading && weather && (\n                <>\n                    <div className={styles.info}>{weather.main.temp} °C</div>\n                    {location && <div className={styles.info}>{location}</div>}\n                    <div className={styles.info}>\n                        {weather.weather[0].main}, Wind - {weather.wind.speed}{' '}\n                        meter per second\n                    </div>\n\n                    <button\n                        className={styles.addContainer}\n                        onClick={handleClick}\n                    >\n                        {isAdded ? '✓' : '+'}\n                    </button>\n                </>\n            )}\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    weatherState: state.weather,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    addCity: () => dispatch(addCity()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherInfo)\n","import React from 'react'\nimport Header from '../Header'\nimport WeatherInfo from '../Weatherinfo'\n\nconst Layout = ({ location, weatherData, children }) => {\n    return (\n        <div>\n            <Header />\n            <WeatherInfo weatherData={weatherData} location={location} />\n            {children}\n        </div>\n    )\n}\n\nexport default Layout\n","import React, { useEffect } from 'react'\nimport Cities from '../Cities'\nimport Layout from '../Layout'\nimport { detectUserCity } from '../../redux/user/actions'\nimport { connect } from 'react-redux'\nimport { loadWeather } from '../../redux/weather/actions'\n\nconst Main = ({ user, weatherData, loadWeather, detectUserCity }) => {\n    const { city } = user\n\n    useEffect(() => {\n        detectUserCity()\n    }, [detectUserCity])\n\n    useEffect(() => {\n        if (city) {\n            loadWeather(`${city.city},${city.countryCode}`)\n        }\n    }, [loadWeather, city])\n\n    return (\n        <Layout\n            weatherData={weatherData.weather}\n            location={`${city?.city}, ${city?.countryCode}`}\n        >\n            <Cities />\n        </Layout>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    user: state.user,\n    weatherData: state.weather,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    detectUserCity: () => dispatch(detectUserCity()),\n    loadWeather: (params) => dispatch(loadWeather(params)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main)\n","import * as Types from './types'\n\nexport const detectUserCity = () => (dispatch, getState, api) => {\n    dispatch({\n        type: Types.LOAD_USER_CITY,\n    })\n\n    return api.user\n        .fetchUserLocation()\n        .then((response) => {\n            dispatch({\n                type: Types.SUCCESSFULLY_LOAD_USER_CITY,\n                payload: response,\n            })\n        })\n        .catch((err) => {\n            dispatch({\n                type: Types.ERROR_IN_USER_CITY,\n                payload: err,\n            })\n        })\n}\n","export const LOAD_USER_CITY = 'load-user-city'\nexport const SUCCESSFULLY_LOAD_USER_CITY = 'successfully-set-user-city'\nexport const ERROR_IN_USER_CITY = 'error-in-user-city'\n","import React, { useEffect, useState } from 'react'\nimport styles from './styles.module.scss'\nimport { loadCurrentWeather } from '../../redux/weather/actions'\nimport { connect } from 'react-redux'\n\nconst Marker = ({ city, weather, loadCurrentWeather }) => {\n    const [showTooltip, setShowTooltip] = useState(false)\n\n    const handleClick = () => setShowTooltip(true)\n\n    const { currentWeather } = weather\n\n    useEffect(() => {\n        if (city) {\n            loadCurrentWeather(city.formattedSuggestion.mainText)\n        }\n    }, [loadCurrentWeather, city])\n\n    return (\n        <div className={styles.marker} onClick={handleClick}>\n            {showTooltip && (\n                <div className={styles.tooltip}>\n                    <div>{currentWeather.main.temp} °C</div>\n                    <div>Feels like {currentWeather.main.feels_like} °C</div>\n                    <div>\n                        {currentWeather.weather[0].main}, Wind -{' '}\n                        {currentWeather.wind.speed} meter per second\n                    </div>\n                </div>\n            )}\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    weather: state.weather,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    loadCurrentWeather: (params) => dispatch(loadCurrentWeather(params)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Marker)\n","import React, { useEffect, useState } from 'react'\nimport moment from 'moment'\nimport styles from './styles.module.scss'\nimport GoogleMapReact from 'google-map-react'\nimport { connect } from 'react-redux'\nimport { detectUserCity } from '../../redux/user/actions'\nimport Marker from '../Marker'\n\nconst DayInfo = ({ day, forecast, city, detectUserCity }) => {\n    useEffect(() => {\n        detectUserCity()\n    }, [detectUserCity])\n\n    useEffect(() => {\n        if (city.selectedCity && city.selectedCity.coords) {\n            setCoords(city.selectedCity.coords)\n        }\n    }, [city])\n\n    const [coords, setCoords] = useState({\n        lat: 0,\n        lng: 0,\n    })\n\n    let tableData = []\n\n    const detectDay = () => {\n        switch (day) {\n            case 'today':\n                tableData = forecast.filter((item) =>\n                    item.dt_txt.match(moment().format('YYYY-MM-DD'))\n                )\n                return moment().format('MMMM, DD')\n            case 'tomorrow':\n                tableData = forecast.filter((item) =>\n                    item.dt_txt.match(\n                        moment().add(1, 'days').format('YYYY-MM-DD')\n                    )\n                )\n                return moment().add(1, 'days').format('MMMM, DD')\n            default:\n                return moment().format('MMMM, DD')\n        }\n    }\n\n    return (\n        <div className={styles.DayInfo}>\n            <div className={styles.infoBlock}>\n                <h1 className={styles.day}>{day}</h1>\n                <div>{detectDay()}</div>\n\n                <table className={styles.table}>\n                    <thead>\n                        <tr className={styles.row}>\n                            <th className={styles.cell}>Time</th>\n                            <th className={styles.cell}>Weather</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {tableData &&\n                            tableData.map((item) => (\n                                <tr className={styles.row} key={item.dt}>\n                                    <td className={styles.cell}>\n                                        {moment(item.dt_txt).format('HH:mm')}\n                                    </td>\n                                    <td className={styles.cell}>\n                                        {item.main.temp} °C,{' '}\n                                        {item.weather[0].main}, Wind -{' '}\n                                        {item.wind.speed} meter per second\n                                    </td>\n                                </tr>\n                            ))}\n                    </tbody>\n                </table>\n            </div>\n\n            <div className={styles.mapBlock}>\n                <GoogleMapReact\n                    bootstrapURLKeys={{\n                        key: process.env.REACT_APP_GOOGLE_API_KEY,\n                    }}\n                    center={coords}\n                    defaultZoom={12}\n                >\n                    <Marker\n                        lat={coords.lat}\n                        lng={coords.lng}\n                        city={city.selectedCity}\n                    />\n                </GoogleMapReact>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    city: state.cities,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    detectUserCity: () => dispatch(detectUserCity()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DayInfo)\n","import React from 'react'\nimport Layout from '../Layout'\nimport DayInfo from '../DayInfo'\nimport { connect } from 'react-redux'\n\nconst Today = ({ weather }) => {\n    return (\n        <Layout weatherData={weather.forecast[0]}>\n            <DayInfo day={'today'} forecast={weather.forecast} />\n        </Layout>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    weather: state.weather,\n})\n\nexport default connect(mapStateToProps)(Today)\n","import React from 'react'\nimport Layout from '../Layout'\nimport DayInfo from '../DayInfo'\nimport { connect } from 'react-redux'\n\nconst Tomorrow = ({ weather }) => {\n    return (\n        <Layout weatherData={weather.forecast[1]}>\n            <DayInfo day={'tomorrow'} forecast={weather.forecast} />\n        </Layout>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    weather: state.weather,\n})\n\nexport default connect(mapStateToProps)(Tomorrow)\n","import React from 'react'\nimport styles from './styles.module.scss'\nimport moment from 'moment'\nimport WeatherInfo from '../Weatherinfo'\n\nconst WeekInfo = ({ forecast, location }) => {\n    return (\n        <>\n            <div className={styles.wrapper}>\n                <h1>Week</h1>\n\n                <div>\n                    {moment().format('MMMM, DD')} -{' '}\n                    {moment().add(5, 'days').format('MMMM, DD')}\n                </div>\n            </div>\n\n            <div className={styles.Week}>\n                {forecast.map((item) => (\n                    <div className={styles.day} key={item.dt}>\n                        {moment(item.dt_txt).format('DD-MM-YYYY')}\n                        <WeatherInfo weatherData={item} location={location} />\n                    </div>\n                ))}\n            </div>\n        </>\n    )\n}\n\nexport default WeekInfo\n","import React from 'react'\nimport Layout from '../../components/Layout'\nimport { connect } from 'react-redux'\nimport WeekInfo from '../WeekInfo'\n\nconst Week = ({ weather, cities }) => {\n    const forecast = weather.forecast.filter((item) => {\n        return item.dt_txt.match('15:00')\n    })\n\n    return (\n        <Layout weatherData={weather.forecast[0]}>\n            <WeekInfo\n                forecast={forecast}\n                location={cities.selectedCity ? cities.selectedCity.description : ''}\n            />\n        </Layout>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    weather: state.weather,\n    cities: state.cities,\n})\n\nexport default connect(mapStateToProps)(Week)\n","import React, { useEffect } from 'react'\nimport Layout from '../../components/Layout'\nimport { useParams } from 'react-router-dom'\nimport { loadCityWeather } from '../../redux/weather/actions'\nimport { connect } from 'react-redux'\nimport DayInfo from '../../components/DayInfo'\n\nconst City = ({ weather, loadCityWeather }) => {\n    const { city } = useParams()\n\n    const { forecast, cityWeather } = weather\n\n    useEffect(() => {\n        loadCityWeather(city)\n    }, [loadCityWeather, city])\n\n    return (\n        <Layout weatherData={cityWeather} location={city}>\n            <DayInfo day={'today'} forecast={forecast} />\n        </Layout>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    weather: state.weather,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    loadCityWeather: (params) => dispatch(loadCityWeather(params)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(City)\n","import React from 'react'\nimport './App.css'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Main from './components/Main'\nimport Today from './components/Today'\nimport Tomorrow from './components/Tomorrow'\nimport Week from './components/Week'\nimport City from './components/City'\nimport { useScript } from './hooks/useScript'\n\nconst App = () => {\n    const status = useScript(\n        `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_API_KEY}&libraries=places`\n    )\n\n    return (\n        <div className='App'>\n            {status === 'ready' && (\n                <Router>\n                    <Switch>\n                        <Route path='/today' exact>\n                            <Today />\n                        </Route>\n                        <Route path='/tomorrow' exact>\n                            <Tomorrow />\n                        </Route>\n                        <Route path='/week' exact>\n                            <Week />\n                        </Route>\n                        <Route path='/location/:city?'>\n                            <City />\n                        </Route>\n                        <Route path='/' exact>\n                            <Main />\n                        </Route>\n                    </Switch>\n                </Router>\n            )}\n        </div>\n    )\n}\n\nexport default App\n","import { useState, useEffect } from 'react'\n\nexport function useScript(src) {\n    const [status, setStatus] = useState(src ? 'loading' : 'idle')\n\n    useEffect(() => {\n        if (!src) {\n            setStatus('idle')\n            return\n        }\n\n        let script = document.querySelector(`script[src=\"${src}\"]`)\n\n        if (!script) {\n            script = document.createElement('script')\n            script.src = src\n            script.async = true\n            script.setAttribute('data-status', 'loading')\n            document.body.appendChild(script)\n\n            const setAttributeFromEvent = (event) => {\n                script.setAttribute(\n                    'data-status',\n                    event.type === 'load' ? 'ready' : 'error'\n                )\n            }\n\n            script.addEventListener('load', setAttributeFromEvent)\n            script.addEventListener('error', setAttributeFromEvent)\n        } else {\n            setStatus(script.getAttribute('data-status'))\n        }\n\n        const setStateFromEvent = (event) => {\n            setStatus(event.type === 'load' ? 'ready' : 'error')\n        }\n\n        script.addEventListener('load', setStateFromEvent)\n        script.addEventListener('error', setStateFromEvent)\n\n        return () => {\n            if (script) {\n                script.removeEventListener('load', setStateFromEvent)\n                script.removeEventListener('error', setStateFromEvent)\n            }\n        }\n    }, [src])\n\n    return status\n}\n","class ApiService {\n    call(url, method, options, params) {\n        const headers = options.headers || {}\n\n        const token = localStorage.getItem('token')\n        if (token) {\n            headers['Authorization'] = token\n        }\n\n        options.headers = headers\n        options.method = method\n\n        return fetch(url, options)\n            .then((response) => {\n                let result\n                const contentType = response.headers.get('Content-type')\n                if (contentType && contentType === 'application/json') {\n                    result = response.json()\n                } else {\n                    result = response.text()\n                }\n\n                return Promise.all([result, response.status])\n            })\n            .then(([result, status]) => {\n                const data = JSON.parse(result)\n\n                if (status === 401) {\n                    return Promise.reject(data)\n                } else if (status === 200) {\n                    return data\n                }\n            })\n    }\n\n    get(url, params, options = {}) {\n        return this.call(url, 'GET', options, params)\n    }\n\n    post(url, params = null, options = {}) {\n        if (params) {\n            options.body = JSON.stringify(params)\n            options.headers = {\n                'Content-Type': 'application/json',\n            }\n        }\n\n        return this.call(url, 'POST', options)\n    }\n\n    put(url, data = null, options = {}) {\n        if (data) {\n            options.body = JSON.stringify(data)\n            options.headers = {\n                'Content-Type': 'application/json',\n            }\n        }\n\n        return this.call(url, 'PUT', options)\n    }\n\n    delete(url, params, options = {}) {\n        return this.call(url, 'DELETE', options)\n    }\n}\n\nexport default new ApiService()\n","import ApiService from './ApiService'\n\nconst URL = `https://api.openweathermap.org/data/2.5`\n\nconst generateUrl = (url) =>\n    `${url}&units=metric&APPID=${process.env.REACT_APP_OPEN_WEATHER_API_KEY}`\n\nexport default {\n    fetchToday(city) {\n        return ApiService.get(generateUrl(`${URL}/weather?q=${city}`))\n    },\n\n    fetchForecast(city) {\n        return ApiService.get(generateUrl(`${URL}/forecast?q=${city}`))\n    },\n}\n","import user from './UserService'\nimport weather from './WeatherService'\n\nexport default {\n    user,\n    weather,\n}\n","import ApiService from './ApiService'\n\nconst URL = 'http://ip-api.com/json'\n\nexport default {\n    fetchUserLocation() {\n        return ApiService.get(URL)\n    },\n}\n","import * as Types from './types'\n\nconst initState = {\n    selectedCity: null,\n    cities: [],\n}\n\nexport default function (state = initState, { type, payload }) {\n    switch (type) {\n        case Types.SELECT_CITY:\n            return {\n                ...state,\n                selectedCity: payload\n            }\n\n        case Types.ADD_CITY:\n            return {\n                ...state,\n                cities: [...state.cities, state.selectedCity],\n            }\n\n        default:\n            return state\n    }\n}\n","import * as Types from './types'\n\nconst initState = {\n    city: null,\n    isLoading: false,\n}\n\nexport default function (state = initState, { type, payload }) {\n    switch (type) {\n        case Types.LOAD_USER_CITY:\n            return {\n                ...state,\n                isLoading: true,\n            }\n        case Types.SUCCESSFULLY_LOAD_USER_CITY:\n            return {\n                ...state,\n                city: payload,\n                isLoading: false,\n            }\n        case Types.ERROR_IN_USER_CITY:\n            return {\n                ...state,\n                isLoading: false,\n            }\n        default:\n            return state\n    }\n}\n","import * as Types from './types'\n\nconst initState = {\n    isLoading: false,\n    weather: null,\n    forecast: [],\n    cityWeather: null,\n    currentWeather: null,\n}\n\nexport default function (state = initState, { type, payload }) {\n    switch (type) {\n        case Types.LOAD_WEATHER:\n        case Types.LOAD_FORECAST:\n        case Types.LOAD_CITY_WEATHER:\n        case Types.LOAD_CURRENT_WEATHER:\n            return {\n                ...state,\n                isLoading: true,\n            }\n\n        case Types.SUCCESSFULLY_LOAD_WEATHER:\n            return {\n                ...state,\n                weather: payload,\n                isLoading: false,\n            }\n\n        case Types.SUCCESSFULLY_LOAD_FORECAST:\n            return {\n                ...state,\n                forecast: payload.list,\n                isLoading: false,\n            }\n\n        case Types.SUCCESSFULLY_LOAD_CITY_WEATHER:\n            return {\n                ...state,\n                cityWeather: payload,\n                isLoading: false,\n            }\n\n        case Types.SUCCESSFULLY_LOAD_CURRENT_WEATHER:\n            return {\n                ...state,\n                currentWeather: payload,\n                isLoading: false,\n            }\n\n        case Types.ERROR_IN_LOAD_WEATHER:\n        case Types.ERROR_IN_LOAD_FORECAST:\n        case Types.ERROR_IN_LOAD_CITY_WEATHER:\n        case Types.ERROR_IN_LOAD_CURRENT_WEATHER:\n            return {\n                ...state,\n                isLoading: false,\n            }\n\n        default:\n            return state\n    }\n}\n","import { combineReducers } from 'redux'\nimport cities from './cities'\nimport user from './user'\nimport weather from './weather'\n\nexport default combineReducers({\n    cities,\n    user,\n    weather\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport configureStore from './configureStore'\n\nconst store = configureStore()\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n","import { createStore, applyMiddleware } from 'redux'\nimport thunk  from 'redux-thunk';\nimport api from './services';\nimport rootReducer from './redux'\n\nexport default function configureStore(preloadedState) {\n  return createStore(\n      rootReducer,\n      // preloadedState,\n      applyMiddleware(thunk.withExtraArgument(api))\n  )\n}\n"],"sourceRoot":""}